// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
  model User {
    id       Int     @id @default(autoincrement()) @map("id")
    name     String? @map("name")
    username String  @unique @map("username")
    password String  @map("password")
    role     Int     @default(3) @map("role")

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    projectUser ProjectUser[]

    @@map("users")
  }

  model Project {
    id             Int     @id @default(autoincrement()) @map("id")
    username       String  @unique @map("username")
    password       String? @map("password")
    projectName    String  @map("project_name")
    projectNameEng String? @map("project_name_eng")
    abstract       String? @map("abstract")
    abstractEng    String? @map("abstract_eng")
    detail         String? @map("detail")
    detailEng      String? @map("detail_eng")
    semester       Int     @default(1) @map("semester")
    academicYear   Int     @map("academic_year")
    type           String? @map("type")

    projectStatusId Int?           @map("project_status_id")
    projectStatus   ProjectStatus? @relation(fields: [projectStatusId], references: [id])

    students ProjectStudent[]  @relation("ProjectStudent")
    users    ProjectUser[]  @relation("ProjectUser")

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    @@map("projects")
  }

  model Student {
    id        Int      @id @default(autoincrement()) @map("id")
    studentId String   @unique @map("student_id")
    name      String   @map("name")
    createdAt  DateTime @default(now()) @map("created_at")
    updatedAt  DateTime @updatedAt @map("updated_at")

    proejects ProjectStudent[]

    @@map("students")
  }

  model ProjectStatus {
    id        Int     @id @default(autoincrement()) @map("id")
    name      String  @map("name")
    subject   Int     @default(1) @map("subject")
    textColor String  @map("text_color")
    bgColor   String  @map("bg_color")
    isActive  Boolean @default(true) @map("is_active")

    projects Project[]

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    @@map("project_statuses")
  }

  model ProjectStudent {
    project   Project? @relation("ProjectStudent", fields: [projectId], references: [id], onDelete: Cascade)
    projectId Int      @map("project_id")

    student   Student? @relation(fields: [studentId], references: [id])
    studentId Int      @map("student_id")

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    @@id([projectId, studentId])
    @@map("project_students")
  }

  model ProjectUser {
    id        Int      @id @default(autoincrement()) @map("id")
    project   Project @relation("ProjectUser", fields: [projectId], references: [id], onDelete: Cascade)
    projectId Int      @map("project_id")

    user   User? @relation(fields: [userId], references: [id])
    userId Int   @map("user_id")

    @@map("project_users")
  }